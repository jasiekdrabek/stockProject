services:
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: stock
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "6543:5432"
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: "2g"
        reservations:
          cpus: "2.0"
          memory: "1g"

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  db_test:
    image: postgres:14
    environment:
      POSTGRES_DB: test_stock
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "6544:5432"

  web:
    build: .
    command: 
      sh -c 
      "python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py migrate --database=test &&
      python manage.py collectstatic --noinput &&
      python cpu.py &
      gunicorn stockProject.wsgi:application --bind 0.0.0.0:8080 &
      wait"
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    environment:
      ENV_ID: "web"
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: "2g"
        reservations:
          cpus: "2.0"
          memory: "1g"
  
  celery_worker_schedule_transactions:
    build: .
    command: 
      sh -c 
      "python cpu.py &
      celery -A stockProject worker -l info -Q transactions -P gevent"      
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    environment:
      ENV_ID: "celery_worker_schedule_transactions"

  celery_worker_execute_transactions:
    build: .
    command:
      sh -c 
      "python cpu.py &
      celery -A stockProject worker -l info -P gevent"
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    environment:
      ENV_ID: "celery_worker_execute_transactions"
    deploy:
      replicas: 4  #  worker dedykowany do przetwarzania transakcji

  celery_worker_balance_updates:
    build: .
    command:
      sh -c 
      "python cpu.py &
      celery -A stockProject worker -l info -Q balance_updates -P gevent"
    volumes:
      - .:/app
    environment:
      ENV_ID: "celery_worker_balance_updates"
    depends_on:
      - db
      - redis

  celery_worker_stock_rates:
    build: .
    command:
      sh -c 
      "python cpu.py &
      celery -A stockProject worker -l info -Q stock_rates -P gevent"
    volumes:
      - .:/app
    environment:
      ENV_ID: "celery_worker_stock_rates"
    depends_on:
      - db
      - redis

  celery_worker_expire_offers:
    build: .
    command:
      sh -c 
      "python cpu.py &
      celery -A stockProject worker -l info -Q expire_offers -P gevent"
    volumes:
      - .:/app
    environment:
      ENV_ID: "celery_worker_expire_offers"
    depends_on:
      - db
      - redis

  celery_beat:
    build: .
    command:
      sh -c 
      "python cpu.py &
      celery -A stockProject beat --loglevel=info"
    volumes:
      - .:/app
    environment:
      ENV_ID: "celery_beat"
    depends_on:
      - db
      - redis
  locust:
    build: ../loadTestingApp  # ścieżka do nowego projektu
    command: locust --host=http://192.168.1.110:8080
    ports:
      - "8089:8089"
    environment:
      ENV_ID: "locust"
    depends_on:
      - web
      - db

volumes:
  postgres_data:
  postgres_test_data: